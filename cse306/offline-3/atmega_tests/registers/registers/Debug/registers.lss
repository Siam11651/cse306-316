
registers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079b  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000640  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000379  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000188  00000000  00000000  000017b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  74:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <uart_init>:
	UBRRL = 12;
}
unsigned char uart_receive(void){
	while ((UCSRA & (1<<RXC)) == 0x00);
	return UDR;
}
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	8b b9       	out	0x0b, r24	; 11
  80:	88 e1       	ldi	r24, 0x18	; 24
  82:	8a b9       	out	0x0a, r24	; 10
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	80 bd       	out	0x20, r24	; 32
  88:	10 bc       	out	0x20, r1	; 32
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	89 b9       	out	0x09, r24	; 9
  8e:	08 95       	ret

00000090 <uart_send>:

void uart_send(unsigned char data){
	while ((UCSRA & (1<<UDRE)) == 0x00);
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <uart_send>
	UDR = data;
  94:	8c b9       	out	0x0c, r24	; 12
  96:	08 95       	ret

00000098 <main>:
}


int main(void)
{
	uart_init();
  98:	0e 94 3e 00 	call	0x7c	; 0x7c <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e3       	ldi	r18, 0x3F	; 63
  9e:	4d e0       	ldi	r20, 0x0D	; 13
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	40 40       	sbci	r20, 0x00	; 0
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0xa>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x14>
  ac:	00 00       	nop
	_delay_ms(1000);
	
	// Some pins of PORTC can not be used for I/O directly.
	// turn of JTAG to use them
	// o write a 1 to the JTD bit twice consecutively to turn it off
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	84 bf       	out	0x34, r24	; 52
  b2:	84 bf       	out	0x34, r24	; 52
	
	// setting up input and output modes
    DDRA = 0x00;	// A[3:0] - SrcReg1, A[7:4] - SrcReg2
  b4:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0x00;	// B[3:0] - DstReg, B[7:4] - Write Data
  b6:	17 ba       	out	0x17, r1	; 23
	
	DDRC = 0xFF;	// C[3:0] - $1, C[7:4] - $2
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11100000;	// D[2] - WriteReg, D[3] - CLK, D[4] - RESET
  bc:	80 ee       	ldi	r24, 0xE0	; 224
  be:	81 bb       	out	0x11, r24	; 17
	
	uint8_t src, dst_data, last_control = 0, current_control;
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <main+0x2e>
			
			uart_send('\r');
			uart_send('\n');
		}
		
		last_control = current_control;
  c4:	21 2f       	mov	r18, r17
	
	uint8_t src, dst_data, last_control = 0, current_control;
	
    while (1) 
    {
		src = PINA;
  c6:	e9 b3       	in	r30, 0x19	; 25
		dst_data = PINB;
  c8:	36 b3       	in	r19, 0x16	; 22
		current_control = PIND;
  ca:	10 b3       	in	r17, 0x10	; 16
		// src[3:0] is srcReg1, src[7:4] is srcReg2, so first part of OR is srcReg2, second part is srcReg1
		PORTC = ( REGISTER [(src>>4) & 0b00000111] << 4 ) | ( REGISTER[src & 0b00000111 ] );
  cc:	ae 2f       	mov	r26, r30
  ce:	a2 95       	swap	r26
  d0:	af 70       	andi	r26, 0x0F	; 15
  d2:	a7 70       	andi	r26, 0x07	; 7
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	a0 5a       	subi	r26, 0xA0	; 160
  d8:	bf 4f       	sbci	r27, 0xFF	; 255
  da:	8c 91       	ld	r24, X
  dc:	40 e1       	ldi	r20, 0x10	; 16
  de:	84 9f       	mul	r24, r20
  e0:	c0 01       	movw	r24, r0
  e2:	11 24       	eor	r1, r1
  e4:	e7 70       	andi	r30, 0x07	; 7
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	e0 5a       	subi	r30, 0xA0	; 160
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	90 81       	ld	r25, Z
  ee:	89 2b       	or	r24, r25
  f0:	85 bb       	out	0x15, r24	; 21
		
		if (current_control&RESET_) {
  f2:	14 fd       	sbrc	r17, 4
  f4:	08 c0       	rjmp	.+16     	; 0x106 <main+0x6e>
  f6:	11 c0       	rjmp	.+34     	; 0x11a <main+0x82>
			for (uint8_t i=0; i<8; i++) REGISTER[i] = 0;
  f8:	e8 2f       	mov	r30, r24
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	e0 5a       	subi	r30, 0xA0	; 160
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	10 82       	st	Z, r1
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	01 c0       	rjmp	.+2      	; 0x108 <main+0x70>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	b0 f3       	brcs	.-20     	; 0xf8 <main+0x60>
 10c:	87 ea       	ldi	r24, 0xA7	; 167
 10e:	91 e6       	ldi	r25, 0x61	; 97
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x78>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x7e>
 116:	00 00       	nop
			_delay_ms(100);
			continue;
 118:	d6 cf       	rjmp	.-84     	; 0xc6 <main+0x2e>
		}
		
		// checking if clk is different in current and last control
		if ((current_control^last_control)&CLK_) {					
 11a:	82 2f       	mov	r24, r18
 11c:	81 27       	eor	r24, r17
 11e:	83 ff       	sbrs	r24, 3
 120:	d1 cf       	rjmp	.-94     	; 0xc4 <main+0x2c>
			
			//so last control's clk was 1, a negative edge, with write instruction on
			if ((last_control&CLK_) && (last_control&WRITE_REG_)) {	
 122:	23 ff       	sbrs	r18, 3
 124:	0a c0       	rjmp	.+20     	; 0x13a <main+0xa2>
 126:	22 ff       	sbrs	r18, 2
 128:	08 c0       	rjmp	.+16     	; 0x13a <main+0xa2>
				REGISTER[dst_data&0b00000111] = (dst_data>>4);
 12a:	e3 2f       	mov	r30, r19
 12c:	e7 70       	andi	r30, 0x07	; 7
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e0 5a       	subi	r30, 0xA0	; 160
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	32 95       	swap	r19
 136:	3f 70       	andi	r19, 0x0F	; 15
 138:	30 83       	st	Z, r19
 13a:	87 ea       	ldi	r24, 0xA7	; 167
 13c:	91 e6       	ldi	r25, 0x61	; 97
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0xa6>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xac>
 144:	00 00       	nop
				// PORTD = dst_data & 0b11110000;
			}
			_delay_ms(100);
			
			//now we send over uart to arduino, the values of register array
			for (int i = 0; i < 8; i++) {
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	0b c0       	rjmp	.+22     	; 0x162 <main+0xca>
				uart_send((unsigned char)REGISTER[i] + 50);
 14c:	fe 01       	movw	r30, r28
 14e:	e0 5a       	subi	r30, 0xA0	; 160
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	80 81       	ld	r24, Z
 154:	8e 5c       	subi	r24, 0xCE	; 206
 156:	0e 94 48 00 	call	0x90	; 0x90 <uart_send>
				uart_send(' ');
 15a:	80 e2       	ldi	r24, 0x20	; 32
 15c:	0e 94 48 00 	call	0x90	; 0x90 <uart_send>
				// PORTD = dst_data & 0b11110000;
			}
			_delay_ms(100);
			
			//now we send over uart to arduino, the values of register array
			for (int i = 0; i < 8; i++) {
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	c8 30       	cpi	r28, 0x08	; 8
 164:	d1 05       	cpc	r29, r1
 166:	94 f3       	brlt	.-28     	; 0x14c <main+0xb4>
				uart_send((unsigned char)REGISTER[i] + 50);
				uart_send(' ');
			}
			
			uart_send('\r');
 168:	8d e0       	ldi	r24, 0x0D	; 13
 16a:	0e 94 48 00 	call	0x90	; 0x90 <uart_send>
			uart_send('\n');
 16e:	8a e0       	ldi	r24, 0x0A	; 10
 170:	0e 94 48 00 	call	0x90	; 0x90 <uart_send>
		}
		
		last_control = current_control;
 174:	21 2f       	mov	r18, r17
 176:	a7 cf       	rjmp	.-178    	; 0xc6 <main+0x2e>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
