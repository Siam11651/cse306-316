
DataMemory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d8  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c7  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cb  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000139  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  74:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <memory_reset>:
#define MEM_WRITE_	0x01

uint8_t MEMORY[1<<4];

void memory_reset() {
	for (int i=0; i<(1<<4); i++)
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	05 c0       	rjmp	.+10     	; 0x8c <memory_reset+0x10>
		MEMORY[i] = 0;
  82:	fc 01       	movw	r30, r24
  84:	e0 5a       	subi	r30, 0xA0	; 160
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	10 82       	st	Z, r1
#define MEM_WRITE_	0x01

uint8_t MEMORY[1<<4];

void memory_reset() {
	for (int i=0; i<(1<<4); i++)
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	80 31       	cpi	r24, 0x10	; 16
  8e:	91 05       	cpc	r25, r1
  90:	c4 f3       	brlt	.-16     	; 0x82 <memory_reset+0x6>
		MEMORY[i] = 0;
}
  92:	08 95       	ret

00000094 <main>:

int main(void)
{
	
    DDRA = 0b11110000;	// A[0] - Memory Write, A[1] - Memory Read, A[2] - Clock, A[3] - Reset
  94:	80 ef       	ldi	r24, 0xF0	; 240
  96:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b00000000;	// Address B[3:0], Write Data B[7:4]
  98:	17 ba       	out	0x17, r1	; 23
	
	DDRD = 0b11111111;	// D[3:0] - Data Read
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 bb       	out	0x11, r24	; 17
	
	memory_reset();
  9e:	0e 94 3e 00 	call	0x7c	; 0x7c <memory_reset>
	
	uint8_t last_control_input = 0b00000000, current_control_input;
	uint8_t last_write_data_address = 0b00000000, current_write_data_address;
  a2:	20 e0       	ldi	r18, 0x00	; 0
	
	DDRD = 0b11111111;	// D[3:0] - Data Read
	
	memory_reset();
	
	uint8_t last_control_input = 0b00000000, current_control_input;
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x18>
  a8:	8d 2f       	mov	r24, r29
  aa:	21 2f       	mov	r18, r17
	uint8_t last_write_data_address = 0b00000000, current_write_data_address;
	
    while (1) 
    {
		current_control_input = PINA & 0b00001111;
  ac:	c9 b3       	in	r28, 0x19	; 25
  ae:	dc 2f       	mov	r29, r28
  b0:	df 70       	andi	r29, 0x0F	; 15
		current_write_data_address = PINB;
  b2:	16 b3       	in	r17, 0x16	; 22
		if (current_control_input & RESET_) {
  b4:	c3 ff       	sbrs	r28, 3
  b6:	09 c0       	rjmp	.+18     	; 0xca <main+0x36>
			memory_reset();
  b8:	0e 94 3e 00 	call	0x7c	; 0x7c <memory_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	87 ea       	ldi	r24, 0xA7	; 167
  be:	91 e6       	ldi	r25, 0x61	; 97
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x2c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x32>
  c6:	00 00       	nop
  c8:	16 c0       	rjmp	.+44     	; 0xf6 <main+0x62>
			_delay_ms(100);
		} 
		// checking if last and current clock bits are different
		else if ((last_control_input ^ current_control_input) & CLK_) {		
  ca:	98 2f       	mov	r25, r24
  cc:	9d 27       	eor	r25, r29
  ce:	92 ff       	sbrs	r25, 2
  d0:	12 c0       	rjmp	.+36     	; 0xf6 <main+0x62>
			// so previous clk was 1 and current clk is 0, a negative edge
			if (last_control_input & CLK_) {						
  d2:	82 ff       	sbrs	r24, 2
  d4:	0a c0       	rjmp	.+20     	; 0xea <main+0x56>
				if (last_control_input & MEM_WRITE_) {
  d6:	80 ff       	sbrs	r24, 0
  d8:	08 c0       	rjmp	.+16     	; 0xea <main+0x56>
					MEMORY[last_write_data_address & 0b00001111] = (last_write_data_address >> 4);
  da:	e2 2f       	mov	r30, r18
  dc:	ef 70       	andi	r30, 0x0F	; 15
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	e0 5a       	subi	r30, 0xA0	; 160
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	22 95       	swap	r18
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	20 83       	st	Z, r18
  ea:	87 ea       	ldi	r24, 0xA7	; 167
  ec:	91 e6       	ldi	r25, 0x61	; 97
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x5a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x60>
  f4:	00 00       	nop
				}
			}
			_delay_ms(100);
		} 
		if (current_control_input & MEM_READ_) {
  f6:	c1 ff       	sbrs	r28, 1
  f8:	d7 cf       	rjmp	.-82     	; 0xa8 <main+0x14>
			PORTD = MEMORY[current_write_data_address & 0b00001111];
  fa:	e1 2f       	mov	r30, r17
  fc:	ef 70       	andi	r30, 0x0F	; 15
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	e0 5a       	subi	r30, 0xA0	; 160
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	80 81       	ld	r24, Z
 106:	82 bb       	out	0x12, r24	; 18
 108:	cf cf       	rjmp	.-98     	; 0xa8 <main+0x14>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
