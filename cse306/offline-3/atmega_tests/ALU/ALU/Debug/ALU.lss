
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a7  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000526  00000000  00000000  0000076b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024d  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002da  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000115  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	// setting output and input modes
	DDRA = 0x00;	//0b00000000			// A[3:0], B[7:4]
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xF8;	//0b11111000			// ALUOp B[2:0]
  6e:	88 ef       	ldi	r24, 0xF8	; 248
  70:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x8f;	//0b10001111			// D[7] - Zero Flag, D[3:0] - Output
  72:	8f e8       	ldi	r24, 0x8F	; 143
  74:	81 bb       	out	0x11, r24	; 17
	uint8_t control_bits;
	uint8_t in1, in2, out;

	while (1)
	{
		control_bits = PINB & 0b00000111;	// ALUOp B[2:0] 
  76:	96 b3       	in	r25, 0x16	; 22
  78:	97 70       	andi	r25, 0x07	; 7

		in1 = PINA & 0b00001111;	// A[3:0]
  7a:	89 b3       	in	r24, 0x19	; 25
  7c:	8f 70       	andi	r24, 0x0F	; 15
		in2 = (PINA & 0b11110000) >> 4;	// B[7:4]
  7e:	29 b3       	in	r18, 0x19	; 25
  80:	42 2f       	mov	r20, r18
  82:	42 95       	swap	r20
  84:	4f 70       	andi	r20, 0x0F	; 15
		out = 0;

		if(control_bits == 0) {
  86:	91 11       	cpse	r25, r1
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
			out = in1 + in2;
  8a:	84 0f       	add	r24, r20
  8c:	24 c0       	rjmp	.+72     	; 0xd6 <main+0x6a>
		} else if(control_bits == 1){
  8e:	91 30       	cpi	r25, 0x01	; 1
  90:	11 f4       	brne	.+4      	; 0x96 <main+0x2a>
			out = in1 - in2;
  92:	84 1b       	sub	r24, r20
  94:	20 c0       	rjmp	.+64     	; 0xd6 <main+0x6a>
		} else if(control_bits == 2) {
  96:	92 30       	cpi	r25, 0x02	; 2
  98:	11 f4       	brne	.+4      	; 0x9e <main+0x32>
			out = in1 & in2;
  9a:	84 23       	and	r24, r20
  9c:	1c c0       	rjmp	.+56     	; 0xd6 <main+0x6a>
		} else if(control_bits == 3) {
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	11 f4       	brne	.+4      	; 0xa6 <main+0x3a>
			out = in1 | in2;
  a2:	84 2b       	or	r24, r20
  a4:	18 c0       	rjmp	.+48     	; 0xd6 <main+0x6a>
		} else if(control_bits == 4) {
  a6:	94 30       	cpi	r25, 0x04	; 4
  a8:	19 f4       	brne	.+6      	; 0xb0 <main+0x44>
			out = ~(in1 | in2);
  aa:	84 2b       	or	r24, r20
  ac:	80 95       	com	r24
  ae:	13 c0       	rjmp	.+38     	; 0xd6 <main+0x6a>
		} else if(control_bits == 5) {
  b0:	95 30       	cpi	r25, 0x05	; 5
  b2:	29 f4       	brne	.+10     	; 0xbe <main+0x52>
			out = in1 << in2;
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x4c>
  b6:	88 0f       	add	r24, r24
  b8:	4a 95       	dec	r20
  ba:	ea f7       	brpl	.-6      	; 0xb6 <main+0x4a>
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <main+0x6a>
		} else if(control_bits == 6) {
  be:	96 30       	cpi	r25, 0x06	; 6
  c0:	49 f4       	brne	.+18     	; 0xd4 <main+0x68>
			out = in1 >> in2;
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	c9 01       	movw	r24, r18
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x62>
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	4a 95       	dec	r20
  d0:	e2 f7       	brpl	.-8      	; 0xca <main+0x5e>
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <main+0x6a>
	{
		control_bits = PINB & 0b00000111;	// ALUOp B[2:0] 

		in1 = PINA & 0b00001111;	// A[3:0]
		in2 = (PINA & 0b11110000) >> 4;	// B[7:4]
		out = 0;
  d4:	80 e0       	ldi	r24, 0x00	; 0
			out = in1 << in2;
		} else if(control_bits == 6) {
			out = in1 >> in2;
		}

		out = out & 0b00001111;	
  d6:	8f 70       	andi	r24, 0x0F	; 15
		if(!out) {	// out == 0b00000000
  d8:	09 f4       	brne	.+2      	; 0xdc <main+0x70>
			out = out | 0b10000000;
  da:	80 68       	ori	r24, 0x80	; 128
		}

		PORTD = out;
  dc:	82 bb       	out	0x12, r24	; 18
	}
  de:	cb cf       	rjmp	.-106    	; 0x76 <main+0xa>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
